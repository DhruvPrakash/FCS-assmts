Foundations of Computer Science2016 — 2017Assignment — 01July 8, 2016

Rules:• Coding should be done in Java and no special libraries are permitted.• Your code should adhere to Google Java Style and should pass static style check of checkstyle.• Your compiled class file(s) should pass Jlint and Findbugs static analysis.• You are expected to use the Git version control system for a simple version control on the files. Though an elaborate configuration management (creating test branches, release branches, etc., with a predetermined work flow) is not expected, you are not discouraged from carrying that out!• You can upload only one file which should be a Zip archive of your document, Java code, “.git” sub-directory (your local git repository), and test data (if any).• The naming convention is “<Your first name (first letter capital and all the other letters small)>-FCS-HW01.zip”.• Your submission will be evaluated on a 100-point scale.• This assignment is due on July 16, 2016.


1. In an IoT application, it is required to find the min and max among the given set of data — temperature recorded by a sensor network over a period of time at specific time intervals. There are thousands of sensors in the network and millions of data. Since some decision has to be taken in real time, performance is a key issue and this application needs to return the results (min and max objects) as fast as possible. This software should also be scalable to work with billions or trillions of data later and should work with a wide variety of temperature sensors.Considering various such “architectural drivers”, top-level designers of the system have taken certain crucial decisions. System will be constructed using homogeneous components, code named ’neurons’. Any number of neurons may be connected to form a tree hierarchy. Each neuron can receive data from sensors directly connected to it and also receive two data (min and max) from each (child node) down-stream neuron connected to it. The neuron should find min and max among these data using absolutely minimal number of comparisons and propagate min and max objects to its up-stream neuron (parent node). The root of the tree will post the min and max values to the decision-making component.Each datum may be assumed to be of the form (Sensor ID, Location, Time Stamp, Temperature Value, Temperature Unit). Note that reported temperatures may be of different units!  
Your mission (you should accept, no choice guys!) is to develop and test code for the neuron component. You may assume that data from directly-connected sensors are available in a random-access buffer and min & max data from down-stream neuron components are also available in the same buffer. You should use absolutely minimum number of comparisons to find min and max among them as fast as possible and add those two objects to the output buffer. You should use plain Java language (version 7 or later) to develop this component. You should not use any special library.Submit your source file(s) along with a document that describes your understanding about the requirements, your assumptions made, your approach to the design, your approach to version control and configuration management, and your testing methods.